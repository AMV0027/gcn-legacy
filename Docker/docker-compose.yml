services:
  frontend:
    build:
      context: ..
      dockerfile: Docker/frontend.Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
      ai_backend:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=http://backend:5000
      - REACT_APP_AI_API_URL=http://ai_backend:5001
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    volumes:
      - ngrok_logs:/var/log
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: ..
      dockerfile: Docker/backend.Dockerfile
    expose:
      - "5000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - CORS_ORIGINS=https://*.ngrok.io
      - POSTGRES_DB=gcn_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gcn_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  ai_backend:
    build:
      context: ..
      dockerfile: Docker/ai_backend.Dockerfile
    expose:
      - "5001"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - CORS_ORIGINS=https://*.ngrok.io
      - OLLAMA_API_URL=http://ollama:11434
      - POSTGRES_DB=gcn_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gcn_db
      - SERPAPI_KEY=a6b3928073576a6c62c095966cc44e79a062a80c176bc12677bee97183af05fb
    depends_on:
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  ollama:
    build:
      context: .
      dockerfile: Docker/ollama.Dockerfile
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    privileged: true

  postgres:
    build:
      context: .
      dockerfile: Docker/postgres.Dockerfile
    environment:
      - POSTGRES_DB=gcn_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  ngrok_logs:
  ollama_data:
    driver: local
  postgres_data:
